{"version":3,"sources":["logo.svg","list-items.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listitems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdateItem","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","event","this","setState","Date","now","preventDefault","newItem","console","log","filterItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,6MCuB5BC,MAlBf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAC1B,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACrC,2BAAG,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC/DZ,EAAMa,cAAcD,EAAEE,OAAOL,MAAOL,EAAKE,QAEzC,8BACA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAI7F,OACE,6BACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAAelB,K,eCbrDmB,IAAQC,IAAIC,K,IAwEGC,E,kDArEb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GAAIJ,IAAK,KAGnB,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,cAAgB,EAAKA,cAAcc,KAAnB,gBAXJ,E,wDAcPE,GACVC,KAAKC,SAAS,CACZN,YAAa,CACXf,KAAMmB,EAAMf,OAAOL,MACnBH,IAAK0B,KAAKC,W,8BAKRJ,GACNA,EAAMK,iBACN,IAAMC,EAAUL,KAAKN,MAAMC,YAE3B,GADAW,QAAQC,IAAIF,GACRA,EAAQzB,KAAM,CAChB,IAAMR,EAAK,sBAAO4B,KAAKN,MAAMtB,OAAlB,CAAyBiC,IACpCL,KAAKC,SAAS,CACZ7B,MAAOA,EACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,S,iCAMFA,GACT,IAAMgC,EAAcR,KAAKN,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAAIA,EAAKE,MAAQA,KACjEwB,KAAKC,SAAS,CACZ7B,MAAOoC,M,oCAIG5B,EAAMJ,GACJwB,KAAKN,MAAMtB,MACnBC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKM,KAAOA,Q,+BAMhB,OACE,yBAAKL,UAAU,OACb,gCACE,0BAAMG,GAAG,YAAYgC,SAAUV,KAAKF,SAClC,2BAAOrB,KAAK,OAAOkC,YAAY,eAAehC,MAAOqB,KAAKN,MAAMC,YAAYf,KAAMC,SAAUmB,KAAKJ,cACjG,4BAAQnB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWL,MAAO4B,KAAKN,MAAMtB,MAAOe,WAAca,KAAKb,WAAYJ,cAAiBiB,KAAKjB,qB,GAjE/E6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.cbf22770.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './list-item.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n  const listitems = items.map(item => {\r\n    return <div className=\"list\" key={item.key}>\r\n      <p><input type=\"text\" id={item.key} value={item.text} onChange={(e) => {\r\n        props.setUpdateItem(e.target.value, item.key)\r\n      }}/>\r\n        <span>\r\n        <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={() => props.deleteItem(item.key)}/>\r\n      </span></p>\r\n    </div>\r\n  })\r\n  return(\r\n    <div>\r\n      <FlipMove duration={300} easing=\"ease-in-out\">{listitems}</FlipMove>\r\n    </div>\r\n  )\r\n}\r\nexport default ListItems;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listitems from './list-items';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '', key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdateItem = this.setUpdateItem.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text) {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      });\n    }\n  }\n\n  deleteItem(key) {\n    const filterItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filterItems\n    });\n  }\n\n  setUpdateItem(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key) {\n        item.text = text;\n      }\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <header>\n          <form id=\"inputFrom\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Please enter\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <Listitems items={this.state.items} deleteItem = {this.deleteItem} setUpdateItem = {this.setUpdateItem}></Listitems>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}